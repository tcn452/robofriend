{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","onsearchChange","event","setState","target","value","state","fetch","then","Response","json","users","filteredRobots","this","filter","toLowerCase","includes","length","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"sPAgBeA,EAdF,SAACC,GAAW,IACdC,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,MAAOC,EAAMH,EAANG,GACxB,OACI,sBAAKC,UAAY,sDAAjB,UACI,qBAAKC,IAAM,SAASC,IAAG,+BAA0BH,EAA1B,cACvB,gCACI,6BAAKF,IACL,4BAAIC,WCUDK,EAhBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACf,OAAS,oCAAQA,EAAOC,KAAI,SAACC,EAAMC,GAC/B,OAAQ,cAAC,EAAD,CACRR,GAAMK,EAAOG,GAAGR,GAChBF,KAAQO,EAAOG,GAAGV,KAClBC,MAASM,EAAOG,GAAGT,OAHCS,UCSbC,EAXG,SAAC,GAA+B,EAA9BC,YAA+B,IAAlBC,EAAiB,EAAjBA,aAC7B,OACI,qBAAKV,UAAU,MAAf,SACA,uBAAOA,UAAU,mCACjBW,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCCHI,G,OARA,SAAClB,GACZ,OACI,qBAAKmB,MAAQ,CAACC,UAAW,SAAUC,OAAO,kBAAmBC,OAAO,SAApE,SACKtB,EAAMuB,aCiDJC,E,kDA7Cb,aAAe,IAAD,8BACZ,gBAcFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAACd,YAAaa,EAAME,OAAOC,SAdzC,EAAKC,MAAO,CACVtB,OAAQ,GACRK,YAAY,IAJF,E,qDASd,WAAoB,IAAD,OACjBkB,MAAM,8CAA8CC,MAAK,SAAAC,GACxD,OAAOA,EAASC,UACdF,MAAK,SAAAG,GAAS,EAAKR,SAAS,CAACnB,OAAO2B,S,oBASzC,WAAU,IAAD,OACDC,EAAiBC,KAAKP,MAAMtB,OAAO8B,QAAO,SAAA9B,GAC9C,OAAOA,EAAOP,KAAKsC,cAAcC,SAAS,EAAKV,MAAMjB,YAAY0B,kBAEnE,OAAgC,IAA5BF,KAAKP,MAAMtB,OAAOiC,OACb,yCAKP,sBAAKrC,UAAY,KAAjB,UACE,oBAAIA,UAAY,KAAhB,yBACA,cAAC,EAAD,CAAWU,aAAcuB,KAAKZ,iBAC9B,cAAC,EAAD,UACA,cAAC,EAAD,CAAUjB,OAAU4B,a,GApCVM,aCIHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,OCEdO,IAASC,OACR,cAAC,EAAD,IAAQC,SAASC,eAAe,SAMjCX,M","file":"static/js/main.433c8709.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = (props) => {\r\n    const {name, email, id} = props;\r\nreturn(\r\n    <div className = 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n        <img alt = 'Robots' src={`https://robohash.org/${id}?200x200`} />\r\n        <div>\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n        </div>\r\n    </div>\r\n)\r\n\r\n}\r\n\r\nexport default Card","import React from \"react\";\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    return ( <div > {robots.map((user, i) => {\r\n        return (<Card key ={i} \r\n        id = {robots[i].id}\r\n        name = {robots[i].name}\r\n        email = {robots[i].email}/>\r\n        );\r\n\r\n    })}\r\n\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default CardList;","import React from \"react\";\r\n\r\n\r\nconst SearchBox = ({searchfield, searchChange})=> {\r\n    return(\r\n        <div className='pa2'>\r\n        <input className='pa3 ba b--green bg-lightest-blue' \r\n        type='search' \r\n        placeholder='Search Robots' \r\n        onChange={searchChange}/>\r\n        </div>\r\n\r\n    );\r\n}\r\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return(\n        <div style ={{overflowY: 'scroll', border:'1px solid black', height:'500px'}}>\n            {props.children}\n        </div>\n    )\n};\n\nexport default Scroll;","import { render } from '@testing-library/react';\r\nimport React, {Component} from 'react';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox'\r\nimport './App.css';\r\nimport Scroll from './Scroll';\r\n\r\n\r\nclass App extends Component{\r\n  constructor() {\r\n    super()\r\n    this.state ={\r\n      robots: [],\r\n      searchfield:''\r\n    }\r\n    \r\n  }\r\n\r\n  componentDidMount(){\r\n    fetch('https://jsonplaceholder.typicode.com/users').then(Response=>{\r\n     return Response.json();\r\n    }).then(users =>{this.setState({robots:users})})\r\n  }\r\n\r\n  onsearchChange = (event) =>{\r\n    this.setState({searchfield: event.target.value})\r\n }\r\n\r\n\r\n\r\n  render() {\r\n    const filteredRobots = this.state.robots.filter(robots =>{\r\n      return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n    })\r\n    if (this.state.robots.length ===0){\r\n      return <h1>Loading</h1>\r\n    }else{\r\n\r\n    \r\n    return (\r\n      <div className = 'tc'>\r\n        <h1 className = 'f1'>RoboFriends</h1>\r\n        <SearchBox searchChange={this.onsearchChange}/>\r\n        <Scroll>\r\n        <CardList robots = {filteredRobots}/>\r\n        </Scroll>\r\n        \r\n      </div>\r\n    )\r\n    }\r\n  }\r\n};\r\n\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'tachyons';\r\nimport {robots} from './robots';\r\n\r\n\r\nReactDOM.render(\r\n <App/>, document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}